{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Metal Programming Language",
    "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#operators" },
        { "include": "#functions" },
        { "include": "#ctrl-statements" },
        { "include": "#reserved-words" },
        { "include": "#numbers" },
        { "include": "#variables" },
        { "include": "#data-things-classes" }
    ],
    "captures": {
        "1": { "name": "entity.name.function.metal" },
        "2": { "name": "entity.built-in.perimitive.metal" },
        "3": { "name": "punctuation.definition.string.end.metal" },
        "4": { "name": "constant.numeric.metal" },
        "5": { "name": "keyword.control.metal" },
        "6": { "name": "keyword.operator.metal" },
        "7": { "name": "variable.name.metal" },
        "8": { "name": "keyword.operator.assignment.compound.metal" },
        "9": { "name": "entity.name.struct-branch-class.metal" },
        "10": { "name": "storage.type.metal" },
        "11": { "name": "constant.numeric.metal" }
    },
    "repository": {
        "variables": {
            "patterns": [
                {
                    "name": "variable.name.metal",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                }
            ]
        },
        "data-things-classes": {
            "patterns": [
                {
                    "name": "storage.type.metal",
                    "match": "\\b(struct|branch|class)\\b"
                },
                {
                    "name": "entity.name.struct-branch-class.metal",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.metal",
                    "match": "//.*"
                },
                {
                    "name": "comment.block.metal",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.metal",
                    "match": "\\+|-|\\*|/|==|!=|<|>|<=|>=|&&|\\|\\|"
                },
                {
                    "name": "keyword.operator.decrement.metal",
                    "match": "--"
                },
                {
                    "name": "keyword.operator.increment.metal",
                    "match": "\\+\\+"
                },
                {
                    "name": "keyword.operator.assignment.compound.metal",
                    "match": "\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>="
                },
                {
                    "name": "keyword.operator.assignment.compound.bitwise.metal",
                    "match": "&=|\\|=|\\^=|<<=|>>="
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "punctuation.definition.string.begin.metal",
                    "match": "\"",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.metal"
                        }
                    }
                },
                {
                    "name": "punctuation.definition.string.end.metal",
                    "match": "\"",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.string.end.metal"
                        }
                    }
                },
                {
                    "name": "string.quoted.double.metal",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.metal",
                            "match": "\\\\."
                        }
                    ],
                    "captures": {
                        "0": {
                            "name": "string.quoted.double.metal"
                        }
                    }
                },
                {
                    "name": "string.quoted.single.metal",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.metal",
                            "match": "\\\\."
                        }
                    ],
                    "captures": {
                        "0": {
                            "name": "string.quoted.single.metal"
                        }
                    }
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.metal",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.metal",
                    "match": "\\b(\\d+(\\.\\d+)?|\\.\\d+)([eE][+-]?\\d+)?\\b"
                }
            ]
        },
        "reserved-words": {
            "patterns": [
                {
                    "name": "keyword.control.metal",
                    "match": "\\b(const|public|private|fun|branch|class|println|i128|i32|i64|i16|i8|unsigned|u8|u16|u32|u64|u128|char|float|f128|f32|f64|f16|f8|int|String|mutable|leave)\\b"
                }
            ]
        },
        "ctrl-statements": {
            "patterns": [
                {
                    "name": "keyword.control.metal",
                    "match": "\\b(if|while|switch|break|for|return|else|do|continue)\\b"
                }
            ]
        },
        "expressions": {
            "patterns": [
                { "include": "#strings" },
                { "include": "#reserved-words" },
                { "include": "#paren-expressions" },
                { "include": "#numbers" },
                { "include": "#data-things-classes" }
            ]
        },
        "paren-expressions": {
            "patterns": [
                {
                    "name": "punctuation.definition.expression.begin.metal",
                    "match": "\\("
                },
                {
                    "name": "punctuation.definition.expression.end.metal",
                    "match": "\\)"
                }
            ]
        }
    },
    "scopeName": "source.metal"
}
